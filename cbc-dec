#!/usr/bin/python
import sys
import binascii
from Crypto.Cipher import AES

def ECBdecrypt(key, enc):
    cipher = AES.AESCipher(key[:32], AES.MODE_ECB)
    enc = cipher.decrypt(enc)
    return enc

# input two string, return the bitwise XOR of two strings
def StrXOR(S1, S2):
    zipped = zip(S1, S2)
    XORSTR = ""
    for s1, s2 in zipped:
        XORSTR += chr(ord(s1) ^ ord(s2))
    return XORSTR

# input the ciphertext in string format, return a list of plaintext block without removing padding
def CBCdecryption(key, ciphertext):
    if len(key) > 32:
        key = key[:32]
        print "key was longer than 256 bits, only the first 256 bits were used."
    ciphertextlength = len(ciphertext)
    if ciphertextlength % 16 != 0:
        return "ERROR"
    plaintext= []
    blockflag = 16
    IV = ciphertext[:blockflag]
    while blockflag < ciphertextlength:
        cipherblock = ciphertext[blockflag:(blockflag+16)]
        aesplaintextblock = ECBdecrypt(key, cipherblock)
        plaintextblock = StrXOR(IV, aesplaintextblock)
        plaintext.append(plaintextblock)
        IV = cipherblock
        blockflag += 16
    return plaintext

def CBCoutputregulation(listofplaintextblock):
    plaintext = ""
    if listofplaintextblock[-1] == "10101010101010101010101010101010".decode("hex"):
        for block in listofplaintextblock[:-1]:
            plaintext += block
            return plaintext
    else:
        numberofpadding = int(listofplaintextblock[-1][-1].encode("hex"), 16)
        lastblock = listofplaintextblock[-1][:16-numberofpadding]
        for block in listofplaintextblock[:-1]:
            plaintext += block
        return plaintext + lastblock


if __name__ == "__main__":
    #print sys.argv
    if "-i" not in sys.argv:
        print "No INPUT FILE"
    if "-o" not in sys.argv:
        print "NO OUTPUT FILE"
    if "-k" not in sys.argv:
        print "NO KEY FILE"

    keyfile = sys.argv[ sys.argv.index("-k") + 1]
    inputfile = sys.argv[ sys.argv.index("-i") + 1]
    outputfile  = sys.argv[ sys.argv.index("-o") + 1]

    plaintext = CBCoutputregulation(CBCdecryption(open(keyfile).read(), open(inputfile).read()))
    plaintextfile = open(outputfile, "ab+")
    plaintextfile.write(plaintext)
    plaintextfile.close()
