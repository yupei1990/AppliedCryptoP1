#!/usr/bin/python

import os
from Crypto.Cipher import AES
import sys

def ECBencrypt(key, raw):
    cipher = AES.AESCipher(key[:32], AES.MODE_ECB)
    ciphertext = cipher.encrypt(raw)
    return ciphertext
    # print len(ciphertext)
    # return binascii.hexlify(ciphertext).decode("utf-8")

# input two string, return the bitwise XOR of two strings
def StrXOR(S1, S2):
    zipped = zip(S1, S2)
    XORSTR = ""
    for s1, s2 in zipped:
        XORSTR += chr(ord(s1) ^ ord(s2))
    return XORSTR

# input a file, return a list of plaintext block, already padding
def CBCinputregulate(inputfile):
    inputdata = open(inputfile)
    textblock = []
    data = inputdata.read(16)
    flag = 0
    while True:
        if 0 < len(data) < 16:
            textblock.append(data)
            flag = 1
            break
        if len(data) == 0:
            break
        textblock.append(data)
        data = inputdata.read(16)
    if flag == 1:
        numtopad = 16 - len(textblock[-1])
        lastblock = textblock[-1]
        padding = ""
        for _ in xrange(numtopad):
            padding += str("0"+hex(numtopad)[-1])
        lastblock += padding.decode("hex")
        textblock[-1] = lastblock
        return textblock
    else:
        lastblock = "10101010101010101010101010101010".decode("hex")
        textblock.append(lastblock)
        return textblock

# CBC encryption, input the list of plaintext block, key, and the initialize vector, return the cipher text string
def CBCencrypt(key, plaintext, IV):
    initializevector = IV
    ciphertext = IV
    if len(key) > 32:
        print "key was longer than 256 bits, only the first 256 bits were used."
    for plaintextblock in plaintext:
        cipherblock = ECBencrypt(key[:32], StrXOR(plaintextblock, initializevector))
        ciphertext += cipherblock
        initializevector = cipherblock
    return ciphertext

def randomIVgenerator():
    return os.urandom(16)

if __name__ == "__main__":
    #print sys.argv
    if "-i" not in sys.argv:
        print "No INPUT FILE"
    if "-o" not in sys.argv:
        print "NO OUTPUT FILE"
    if "-k" not in sys.argv:
        print "NO KEY FILE"
    keyfile = sys.argv[ sys.argv.index("-k") + 1]
    inputfile = sys.argv[ sys.argv.index("-i") + 1]
    outputfile  = sys.argv[ sys.argv.index("-o") + 1]
    if "-v" in sys.argv:
        IV = open(sys.argv[ sys.argv.index("-v") + 1]).read().strip()
        if len(IV) > 16:
            IV = IV[:16]
            print "IV was more than 128 bytes, only the first 128 bits were used"
        InitializeVector = IV
    else:
        InitializeVector = randomIVgenerator()
        print "NO IV file, random IV generated."
        print "IV in hex string: ", InitializeVector.encode("hex")
    Cipher = CBCencrypt(open(keyfile).read(), CBCinputregulate(inputfile), InitializeVector)
    Cipherfile = open(outputfile, "wb+")
    Cipherfile.write(Cipher)
    Cipherfile.close()

